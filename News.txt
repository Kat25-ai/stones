import streamlit as st
import pandas as pd
import numpy as np
import feedparser
import requests
from datetime import datetime, timedelta
import plotly.express as px
from bs4 import BeautifulSoup
from textblob import TextBlob
import time
import json

# --- Configuration ---
st.set_page_config(
    layout="wide", 
    page_title="Professional Forex Fundamental Analyzer",
    page_icon="📊"
)

# --- API Keys (replace with your own) ---
# Use st.secrets for production, fallback to environment variables or defaults
try:
    NEWSAPI_KEY = st.secrets.get("NEWSAPI_KEY", "")
    ALPHA_VANTAGE_KEY = st.secrets.get("ALPHA_VANTAGE_KEY", "")
    OANDA_TOKEN = st.secrets.get("OANDA_TOKEN", "")
except:
    NEWSAPI_KEY = ""
    ALPHA_VANTAGE_KEY = ""
    OANDA_TOKEN = ""

# --- Constants ---
CENTRAL_BANKS = {
    "Fed": "Federal Reserve (USD)",
    "ECB": "European Central Bank (EUR)",
    "BOE": "Bank of England (GBP)",
    "BOJ": "Bank of Japan (JPY)",
    "BOC": "Bank of Canada (CAD)",
    "RBA": "Reserve Bank of Australia (AUD)",
    "RBNZ": "Reserve Bank of New Zealand (NZD)",
    "SNB": "Swiss National Bank (CHF)"
}

# --- Data Fetching Functions ---
def get_economic_calendar():
    """Get high-impact events from economic calendar"""
    try:
        # Using a mock economic calendar since Forex Factory RSS might not be available
        # In production, you'd use a proper economic calendar API
        mock_events = [
            {
                "date": (datetime.now() + timedelta(hours=2)).strftime("%Y-%m-%d %H:%M"),
                "currency": "USD",
                "title": "Federal Reserve Interest Rate Decision",
                "forecast": "5.25%",
                "previous": "5.00%",
                "actual": "Pending",
                "timestamp": datetime.now() + timedelta(hours=2),
                "impact": "High"
            },
            {
                "date": (datetime.now() + timedelta(hours=6)).strftime("%Y-%m-%d %H:%M"),
                "currency": "EUR",
                "title": "ECB Monetary Policy Statement",
                "forecast": "4.50%",
                "previous": "4.25%",
                "actual": "Pending",
                "timestamp": datetime.now() + timedelta(hours=6),
                "impact": "High"
            },
            {
                "date": (datetime.now() - timedelta(hours=1)).strftime("%Y-%m-%d %H:%M"),
                "currency": "GBP",
                "title": "UK Inflation Rate YoY",
                "forecast": "2.1%",
                "previous": "2.0%",
                "actual": "2.3%",
                "timestamp": datetime.now() - timedelta(hours=1),
                "impact": "High"
            }
        ]
        return pd.DataFrame(mock_events)
    except Exception as e:
        st.error(f"Error fetching economic calendar: {str(e)}")
        return pd.DataFrame()

def get_news_sentiment(query="forex interest rates central bank"):
    """Get recent news sentiment"""
    try:
        if not NEWSAPI_KEY or NEWSAPI_KEY == "":
            # Mock news data when API key is not available
            mock_articles = [
                {
                    "source": "Reuters",
                    "title": "Federal Reserve signals cautious approach to rate cuts",
                    "sentiment": -0.2,
                    "sentiment_label": "Bearish",
                    "url": "https://example.com/news1",
                    "published": (datetime.now() - timedelta(hours=2)).strftime("%Y-%m-%d %H:%M"),
                    "color": "red"
                },
                {
                    "source": "Bloomberg",
                    "title": "ECB maintains hawkish stance on inflation",
                    "sentiment": 0.1,
                    "sentiment_label": "Neutral",
                    "url": "https://example.com/news2",
                    "published": (datetime.now() - timedelta(hours=4)).strftime("%Y-%m-%d %H:%M"),
                    "color": "gray"
                },
                {
                    "source": "Financial Times",
                    "title": "Strong economic data boosts market confidence",
                    "sentiment": 0.4,
                    "sentiment_label": "Bullish",
                    "url": "https://example.com/news3",
                    "published": (datetime.now() - timedelta(hours=6)).strftime("%Y-%m-%d %H:%M"),
                    "color": "green"
                }
            ]
            return pd.DataFrame(mock_articles)
        
        # Real NewsAPI implementation
        url = f"https://newsapi.org/v2/everything?q={query}&language=en&sortBy=publishedAt&apiKey={NEWSAPI_KEY}"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        articles = []
        for article in data.get('articles', [])[:15]:
            text = f"{article['title']}. {article.get('description', '')}"
            try:
                analysis = TextBlob(text)
                polarity = analysis.sentiment.polarity
            except:
                polarity = 0
            
            articles.append({
                "source": article['source']['name'],
                "title": article['title'],
                "sentiment": polarity,
                "sentiment_label": "Bullish" if polarity > 0.1 else "Bearish" if polarity < -0.1 else "Neutral",
                "url": article['url'],
                "published": article['publishedAt'][:19].replace("T", " "),
                "color": "green" if polarity > 0.1 else "red" if polarity < -0.1 else "gray"
            })
        return pd.DataFrame(articles)
    except Exception as e:
        st.error(f"Error fetching news sentiment: {str(e)}")
        return pd.DataFrame()

def get_central_bank_speeches():
    """Fetches latest central bank communications"""
    try:
        # Mock central bank speeches data
        speeches = [
            {
                "central_bank": "Fed",
                "title": "Chair Powell speaks on economic outlook and monetary policy",
                "date": (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d"),
                "url": "https://example.com/fed-speech",
                "timestamp": datetime.now() - timedelta(days=1)
            },
            {
                "central_bank": "ECB",
                "title": "ECB President Lagarde discusses inflation targets",
                "date": (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d"),
                "url": "https://example.com/ecb-speech",
                "timestamp": datetime.now() - timedelta(days=2)
            }
        ]
        return pd.DataFrame(speeches)
    except Exception as e:
        st.error(f"Error fetching central bank speeches: {str(e)}")
        return pd.DataFrame()

# --- Analysis Functions ---
class CentralBankDecoder:
    def __init__(self):
        self.hawkish_phrases = {
            "inflation concern": 0.9,
            "tighten policy": 0.95,
            "strong economy": 0.8,
            "overheating": 0.85,
            "rate hike": 1.0,
            "higher for longer": 0.9,
            "hawkish": 0.8,
            "restrictive": 0.7
        }
        
        self.dovish_phrases = {
            "patient approach": 0.9,
            "growth risks": 0.85,
            "accommodative": 0.95,
            "monitor closely": 0.75,
            "rate cut": 1.0,
            "easing policy": 0.85,
            "dovish": 0.8,
            "cautious": 0.7
        }
        
        self.hedge_phrases = [
            "data dependent", "uncertain", "transitory", 
            "crosscurrents", "balance risks", "depending on"
        ]
    
    def analyze_speech(self, title):
        """Analyze speech sentiment"""
        text = title.lower()
        
        hawk_score = sum(weight for phrase, weight in self.hawkish_phrases.items() 
                         if phrase in text)
        dovish_score = sum(weight for phrase, weight in self.dovish_phrases.items() 
                           if phrase in text)
        
        # Calculate confidence
        confidence = min(100, max(hawk_score, dovish_score) * 50)
        if confidence < 30:
            confidence = 30  # Minimum confidence
        
        if hawk_score > dovish_score:
            return "Hawkish", confidence
        elif dovish_score > hawk_score:
            return "Dovish", confidence
        return "Neutral", confidence

def calculate_safety_score(event):
    """Calculate trading safety score (0-100)"""
    score = 50
    
    # Positive factors
    if event['actual'] != 'Pending' and str(event['actual']) != str(event['forecast']):
        score += 25  # Surprise factor
    if "rate" in event['title'].lower():
        score += 15  # Interest rate events are more reliable
    
    # Negative factors
    if any(term in event['title'].lower() for term in ["fed", "ecb", "boe"]):
        score -= 10  # High volatility expected
    if "speech" in event['title'].lower():
        score -= 20  # Unpredictable outcomes
        
    return max(0, min(100, score))

def generate_trade_signals(events, speeches):
    """Generate trade signals based on events and speeches"""
    signals = []
    
    # Process events
    for _, event in events.iterrows():
        if event['actual'] == 'Pending' or event['currency'] == '':
            continue
            
        safety = calculate_safety_score(event)
        surprise = 0
        
        try:
            # Calculate surprise factor
            actual_str = str(event['actual']).replace('%', '')
            forecast_str = str(event['forecast']).replace('%', '')
            
            actual_val = float(actual_str)
            forecast_val = float(forecast_str)
            surprise = (actual_val - forecast_val) / forecast_val * 100 if forecast_val != 0 else 0
        except:
            surprise = 0
            
        if safety > 40 and abs(surprise) > 5:
            signal = {
                "type": "EVENT",
                "pair": f"{event['currency']}/USD",
                "direction": "BUY" if surprise > 0 else "SELL",
                "strength": min(100, abs(surprise) * 10),
                "reason": event['title'],
                "confidence": safety,
                "expiry": (event['timestamp'] + timedelta(hours=4)).strftime("%H:%M")
            }
            signals.append(signal)
    
    # Process central bank speeches
    if not speeches.empty:
        decoder = CentralBankDecoder()
        for _, speech in speeches.iterrows():
            direction, confidence = decoder.analyze_speech(speech['title'])
            if confidence > 40:
                bank_currency = {
                    "Fed": "USD", "ECB": "EUR", "BOE": "GBP", 
                    "BOJ": "JPY", "BOC": "CAD", "RBA": "AUD"
                }
                currency = bank_currency.get(speech['central_bank'], "USD")
                
                signal = {
                    "type": "SPEECH",
                    "pair": f"{currency}/USD" if currency != "USD" else "USD/JPY",
                    "direction": "BUY" if direction == "Hawkish" else "SELL",
                    "strength": confidence,
                    "reason": speech['title'],
                    "confidence": confidence,
                    "expiry": (speech['timestamp'] + timedelta(days=1)).strftime("%Y-%m-%d")
                }
                signals.append(signal)
    
    return signals

# --- Dashboard UI ---
st.title("💰 Professional Forex Fundamental Analyzer")
st.caption("Real-time News, Events, and Central Bank Analysis")

# Add warning if API keys are missing
if not NEWSAPI_KEY:
    st.warning("⚠️ NewsAPI key not configured. Using mock data for demonstration.")

# --- Data Loading with error handling ---
try:
    with st.spinner("Loading market data..."):
        calendar_df = get_economic_calendar()
        news_df = get_news_sentiment()
        speeches_df = get_central_bank_speeches()
        trade_signals = generate_trade_signals(calendar_df, speeches_df)
except Exception as e:
    st.error(f"Error loading data: {str(e)}")
    calendar_df = pd.DataFrame()
    news_df = pd.DataFrame()
    speeches_df = pd.DataFrame()
    trade_signals = []

# --- Layout Tabs ---
tab1, tab2, tab3, tab4 = st.tabs([
    "📈 Market Overview", 
    "🗓️ Economic Calendar", 
    "🏦 Central Bank Analysis",
    "🚦 Trading Signals"
])

with tab1:
    st.subheader("Market Sentiment Dashboard")
    
    # Sentiment summary
    if not news_df.empty:
        avg_sentiment = news_df['sentiment'].mean()
        col1, col2, col3 = st.columns(3)
        
        with col1:
            sentiment_label = "Bullish 🚀" if avg_sentiment > 0.1 else "Bearish 🐻" if avg_sentiment < -0.1 else "Neutral ➖"
            st.metric("Overall Sentiment", sentiment_label, f"{avg_sentiment:.3f}")
        
        # News sentiment timeline
        news_df['published'] = pd.to_datetime(news_df['published'])
        fig = px.scatter(
            news_df, 
            x='published', 
            y='sentiment',
            color='sentiment_label',
            color_discrete_map={
                "Bullish": "green",
                "Bearish": "red",
                "Neutral": "gray"
            },
            hover_data=['title', 'source'],
            title="News Sentiment Timeline"
        )
        fig.update_layout(yaxis_range=[-1,1], height=300)
        col2.plotly_chart(fig, use_container_width=True)
        
        # Sentiment distribution
        sentiment_dist = news_df['sentiment_label'].value_counts()
        fig = px.pie(
            values=sentiment_dist.values,
            names=sentiment_dist.index,
            title="Sentiment Distribution",
            hole=0.5,
            color_discrete_map={
                "Bullish": "green",
                "Bearish": "red",
                "Neutral": "gray"
            }
        )
        col3.plotly_chart(fig, use_container_width=True)
        
        # Display news articles
        st.subheader("Latest Market News")
        for _, article in news_df.iterrows():
            with st.expander(f"{article['source']}: {article['title']}"):
                st.caption(f"Published: {article['published']} | Sentiment: {article['sentiment_label']}")
                st.markdown(f"[Read Full Article]({article['url']})")
    else:
        st.warning("No financial news available")

with tab2:
    st.subheader("High-Impact Economic Events")
    
    if calendar_df.empty:
        st.warning("No upcoming high-impact events")
    else:
        # Current time marker
        now = datetime.now().strftime("%Y-%m-%d %H:%M")
        st.info(f"Current Time: {now} | Timezone: UTC")
        
        # Display events in timeline
        for _, event in calendar_df.iterrows():
            safety = calculate_safety_score(event)
            time_diff = (event['timestamp'] - datetime.now()).total_seconds()/3600
            
            with st.container(border=True):
                cols = st.columns([1, 4, 1])
                
                with cols[0]:
                    st.subheader(event['currency'])
                    st.caption(event['timestamp'].strftime("%H:%M"))
                
                with cols[1]:
                    st.write(f"**{event['title']}**")
                    st.caption(f"Forecast: {event['forecast']} | Actual: {event['actual']}")
                    
                    # Time indicator
                    if time_diff > 0:
                        st.caption(f"⏱️ In {abs(time_diff):.1f} hours")
                    else:
                        st.caption(f"🕒 {abs(time_diff):.1f} hours ago")
                
                with cols[2]:
                    st.metric("Safety", f"{safety}/100")
                    st.progress(safety/100)

with tab3:
    st.subheader("Central Bank Communications Analysis")
    
    if speeches_df.empty:
        st.warning("No recent central bank communications")
    else:
        decoder = CentralBankDecoder()
        
        # Central bank status overview
        st.subheader("Central Bank Policy Stance")
        unique_banks = speeches_df['central_bank'].unique()
        policy_cols = st.columns(len(unique_banks))
        
        for idx, bank in enumerate(unique_banks):
            bank_speeches = speeches_df[speeches_df['central_bank'] == bank]
            direction, confidence = decoder.analyze_speech(
                bank_speeches.iloc[0]['title']
            )
            
            with policy_cols[idx]:
                st.metric(
                    bank, 
                    direction,
                    f"{confidence:.0f}% confidence"
                )
                st.progress(confidence/100)
        
        # Detailed speeches
        st.subheader("Recent Speeches & Statements")
        for _, speech in speeches_df.iterrows():
            direction, confidence = decoder.analyze_speech(speech['title'])
            color = "green" if direction == "Hawkish" else "red" if direction == "Dovish" else "gray"
            
            with st.expander(f"{speech['central_bank']}: {speech['title']}"):
                st.markdown(f"**Date**: {speech['date']}")
                st.markdown(f"**Analysis**: {direction} with {confidence:.0f}% confidence")
                st.markdown(f"**Expected Impact**: Currencies may respond with **{'strength' if direction == 'Hawkish' else 'weakness'}**")
                st.markdown(f"[Read Full Speech]({speech['url']})")

with tab4:
    st.subheader("Trade Signal Dashboard")
    
    if not trade_signals:
        st.info("No strong trading signals detected")
    else:
        # Sort by confidence
        trade_signals.sort(key=lambda x: x['confidence'], reverse=True)
        
        # Display signals
        for signal in trade_signals:
            emoji = "🚀" if signal['direction'] == "BUY" else "🔻"
            
            with st.container(border=True):
                cols = st.columns([1, 3, 1])
                
                with cols[0]:
                    st.subheader(f"{signal['pair']}")
                    st.write(f"### {signal['direction']} {emoji}")
                
                with cols[1]:
                    st.write(f"**{signal['reason']}**")
                    st.progress(signal['confidence']/100, text=f"Confidence: {signal['confidence']:.0f}%")
                    st.caption(f"Signal Type: {signal['type']} | Expires: {signal['expiry']}")
                
                with cols[2]:
                    st.metric("Strength", f"{signal['strength']:.0f}/100")
                    
                    # Trading advice
                    if signal['strength'] > 80:
                        st.success("Strong Signal")
                    elif signal['strength'] > 60:
                        st.warning("Moderate Signal")
                    else:
                        st.info("Weak Signal")
        
        # Trading strategy tips
        st.subheader("Trading Strategy Recommendations")
        st.markdown("""
        - **Entry Strategy**: 
          - Wait for price confirmation (1-5 minute closing above entry for BUY, below for SELL)
          - Use limit orders at key support/resistance levels
          
        - **Risk Management**:
          - Set stop-loss at 1.0-1.5x ATR
          - Risk no more than 1% per trade
          - Take profit at 2.0-3.0x risk
          
        - **Position Sizing**:
          ```python
          def calculate_position_size(account_size, risk_percent, stop_loss_pips):
              risk_amount = account_size * (risk_percent / 100)
              position_size = risk_amount / (stop_loss_pips * 10)
              return round(position_size, 2)
          ```
        """)

# --- Sidebar ---
st.sidebar.header("Professional Trading Tools")
st.sidebar.subheader("Risk Calculator")
account_size = st.sidebar.number_input("Account Size ($)", 1000, 1000000, 10000)
risk_percent = st.sidebar.slider("Risk per Trade (%)", 0.1, 10.0, 1.0)
stop_loss = st.sidebar.number_input("Stop Loss (pips)", 5, 100, 30)

position_size = account_size * (risk_percent / 100) / (stop_loss * 10)
st.sidebar.metric("Position Size (Lots)", f"{position_size:.2f}")

st.sidebar.subheader("Market Status")
market_status = st.sidebar.selectbox("Current Market Phase", [
    "Trending (Strong Direction)",
    "Ranging (Sideways)",
    "Breakout (Volatile)",
    "News-Driven (Event Risk)"
])

if "Trending" in market_status:
    st.sidebar.info("✅ Favor trend-following strategies")
elif "Ranging" in market_status:
    st.sidebar.info("🔄 Use range-bound strategies")
elif "Breakout" in market_status:
    st.sidebar.warning("⚠️ Trade breakouts with confirmation")
else:
    st.sidebar.error("❗ Reduce position size, avoid trading during events")

st.sidebar.divider()
st.sidebar.caption("Refresh data every 5 minutes")
if st.sidebar.button("Refresh Data"):
    st.rerun()

# --- Footer ---
st.divider()
st.caption("⚠️ **Disclaimer**: This tool is for educational purposes only. Always conduct your own analysis before trading.")